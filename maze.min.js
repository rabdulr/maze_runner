const board=[];let current;const stack=[];let globalRun;boardState={cols:null,rows:null,xStart:null,yStart:null};function createBoard(){board.splice(0,board.length)
    for(let y=0;y<boardState.rows;y++){const row=new Array();for(let x=0;x<boardState.cols;x++){const cell={'box':[!0,!0,!0,!0],'coord':[y,x],'visited':!1,'highlight':!1,};row.push(cell)}
    board.push(row)}}
    function setState(){const rows=25;const cols=25;const yStart=Math.floor(Math.random()*rows);const xStart=Math.floor(Math.random()*cols);boardState.cols=cols;boardState.rows=rows;boardState.xStart=xStart;boardState.yStart=yStart}
    function setCurrent(){current=board[boardState.yStart][boardState.xStart];current.highlight=!0}
    function renderBoard(){$('#board').empty()
    board.forEach((row)=>{const newRow=$(`<div class='row'></div>`);row.forEach((col)=>{const column=$(`
                    <div class='cell 
                        ${col.highlight ? 'highlight' : ''}
                        ${col.visited ? 'visited' : ''}
                        ${col.box[0] ? 'top' : 'tw'} 
                        ${col.box[1] ? 'right' : 'rw'} 
                        ${col.box[2] ? 'bottom' : 'bw'} 
                        ${col.box[3] ? 'left' : 'lw'}'>
                    </div>`);newRow.append(column)});$('#board').append(newRow)})}
    $('#board').on('click','.cell',function({target}){console.log($(target))})
    function draw(){current.visited=!0;current.highlight=!0;let next=checkNeighbor(current);if(next){next.visited=!0;current.highlight=!1;stack.push(current);boardState.count++
    removeWalls(current,next)
    current=next}else if(stack.length>0){current.highlight=!1;current=stack.pop();boardState.count--}else{globalRun=null;console.log('done')}
    current.highlight=!0}
    function checkNeighbor(current){const y=current.coord[0];const x=current.coord[1];const neighbors=[];const top=coord(y-1,x);const right=coord(y,x+1);const bottom=coord(y+1,x);const left=coord(y,x-1);if(top&&!top.visited){neighbors.push(top)};if(right&&!right.visited){neighbors.push(right)};if(bottom&&!bottom.visited){neighbors.push(bottom)};if(left&&!left.visited){neighbors.push(left)};if(neighbors.length>0){const r=Math.floor(Math.random()*neighbors.length);return neighbors[r]}else{return undefined}}
    function coord(y,x){if(x<0||y<0||x>boardState.cols-1||y>boardState.rows-1){return undefined}
    return board[y][x]}
    function removeWalls(a,b){const x=a.coord[1]-b.coord[1];if(x===1){a.box[3]=!1;b.box[1]=!1}else if(x===-1){a.box[1]=!1;b.box[3]=!1}
    const y=a.coord[0]-b.coord[0];if(y===1){a.box[0]=!1;b.box[2]=!1}else if(y===-1){a.box[2]=!1;b.box[0]=!1}}
    const fps=15;function tick(timestamp){setTimeout(function(){draw();renderBoard();globalRun=requestAnimationFrame(tick)},1000/fps)}
    $('#tick').click(function(){draw();renderBoard()});$('#startRun').click(function(){globalRun=requestAnimationFrame(tick)});$('#pauseRun').click(function(){cancelAnimationFrame(globalRun)});$('#newMaze').click(function(){setState();createBoard();setCurrent();renderBoard()})
    $('#colSet').on('change',function(){boardState.cols=$(this).val();boardState.yStart=Math.floor(Math.random()*$(this).val())
    createBoard();renderBoard()})
    $('#rowSet').on('change',function(){boardState.rows=$(this).val();boardState.xStart=Math.floor(Math.random()*$(this).val())
    createBoard();renderBoard()})
    setState()
    createBoard();setCurrent();renderBoard()